import javax.swing.*;
import java.io.File;

class Titanic extends JFrame {

    public static void main(String[] args) {
        new Titanic();

    }




    public Titanic() {
        this.setTitle("Titanic Passengers Data");
        this.setLayout(null);
        this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        this.setSize(Constants.WINDOW_WIDTH, Constants.WINDOW_HEIGHT);
        this.add(new ManageScreen(0, 0, Constants.WINDOW_WIDTH, Constants.WINDOW_HEIGHT));
        this.setVisible(true);

        Test test=new Test();
        test.readData(new File(Constants.PATH_TO_DATA_FILE));
    }

}










import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class Test {
    private static final ArrayList<Passenger> passengers=new ArrayList<>();
    public String readData(File file) {
        String data;
        String firstLine;
        try {
            BufferedReader bufferedReader = new BufferedReader(new FileReader(Constants.PATH_TO_DATA_FILE));
            firstLine = bufferedReader.readLine();
            while ((data = bufferedReader.readLine()) != null) {
                String[] values = data.split(",",13);

                String name=values[4]+" "+values[3];
                Passenger passenger = new Passenger(values);
                passenger.setName(modify(name));

                //System.out.println(passenger.getName());

                passengers.add(passenger);

            }
            bufferedReader.close();

        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return firstLine;
    }


    public static String modify(String fullName){
        String modifyName=fullName.replace("\"\"", "");
        modifyName=modifyName.replace("\"", "");
        modifyName=modifyName.substring(modifyName.indexOf(".")+1);
        //System.out.println(modifyName);
        return modifyName;
    }
    public static ArrayList<Passenger> getPassengers(){
        return passengers;
    }

}











public class Passenger {
    private final String passengerID;
    private final String survived;
    private final String Pclass;
    private String name;        ///////
    private final String sex;
    private final String age;
    private final String SibSP;
    private final String Parch;
    private final String Ticket;
    private final String Fare;
    private final String Cabin;
    private final String Embarked;

   /* private final String seaPort1="C";
    private final String seaPort2="Q";
    private final String seaPort3="S";
    private final String sex1="male";
    private final String sex2="female";
    private final String class1="1";
    private final String class2="2";
    private final String class3="3";
    private final String status1="0"; // לא שרד
    private final String status2="1"; // שרד*/


    public Passenger(String[] values){
        this.passengerID = values[0];
        this.survived=values[1];
        this.Pclass=values[2];
        this.name = values[3];
        this.sex=values[5];
        this.age = values[6];
        this.SibSP = values[7];
        this.Parch = values[8];
        this.Ticket = values[9];
        this.Cabin = values[10];
        this.Fare = values[11];
        this.Embarked=values[12];


    }
    public String getPassengerID(){return this.passengerID;}
    public String getSurvived(){return this.survived;}
    public String getName(){return this.name;}
    public void setName(String name){this.name=name;}
    public String getPclass(){return this.Pclass;}
    public String getSex(){return this.sex;}
    public String getAge(){return this.age;}
    public String getSibSP(){return this.SibSP;}
    public String getParch(){return this.Parch;}
    public String getTicket(){return this.Ticket;}
    public String getFare(){return this.Fare;}
    public String getCabin(){return this.Cabin;}
    public String getEmbarked(){return this.Embarked;}


}












import javax.swing.*;
import javax.swing.text.*;
import java.io.*;
public class ManageScreen extends JPanel {
    private JComboBox<String> survivedComboBox;
    private JComboBox<Integer> survivedComboBox2;
    private JComboBox<String> survivedComboBox3;
    private JComboBox<String> survivedComboBox4;
    private JComboBox<String> survivedComboBox5;
    private JComboBox<String> survivedComboBox6;
    private JComboBox<String> survivedComboBox7;
    private JComboBox<String> survivedComboBox8;
    private JComboBox<String> survivedComboBox9;
    private JComboBox<String> survivedComboBox10;
    private final JButton filterButton = new JButton("Filter");
    private final JButton statisticsButton =new JButton("Statistics");
    private static JLabel filterLabel=new JLabel();
    private static JLabel statisticsLabel=new JLabel();
    private static String selectedClass="";
    private static String selectedNumber=("");
    private static String selectedName=("");
    private static String selectedGender="";
    private static String selectedSib=("");
    private static String selectedParch=("");
    private static String selectedTicket=("");
    private static String selectedFare=("");
    private static String selectedCabin=("");
    private static String selectedEmbarked=("");

    private static int totalRows;
    private static int survived;
    private static int deceased;
    private static  String desktopPath = System.getProperty("user.home") + "\\Desktop\\";
    private static File file=new File(desktopPath + "newFile.cvs");
    private static FileWriter fileWriter;

    static {
        try {
            fileWriter = new FileWriter(file);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public ManageScreen(int x, int y, int width, int height) {
        File file = new File(Constants.PATH_TO_DATA_FILE);
        if (file.exists()) {
            this.setLayout(null);
            this.setBounds(x, y + Constants.MARGIN_FROM_TOP, width, height);
            JLabel survivedLabel = new JLabel("Passenger Class: ");
            survivedLabel.setBounds(x + Constants.MARGIN_FROM_LEFT, y, Constants.LABEL_WIDTH, Constants.LABEL_HEIGHT);
            this.add(survivedLabel);
            this.survivedComboBox = new JComboBox<>(Constants.PASSENGER_CLASS_OPTIONS);
            this.survivedComboBox.setBounds(survivedLabel.getX() + survivedLabel.getWidth() + 1, survivedLabel.getY(), Constants.COMBO_BOX_WIDTH, Constants.COMBO_BOX_HEIGHT);
            this.add(this.survivedComboBox);

            this.survivedComboBox.addActionListener((e) -> {
                String num=(String) this.survivedComboBox.getSelectedItem();
                assert num != null;
                if(num.startsWith("1")){
                    selectedClass="1";
                }else {
                    if(num.startsWith("2")){
                        selectedClass="2";
                    }else {
                        if(num.startsWith("3")){
                            selectedClass="3";
                        }else {
                            if(num.equals("ALL")){
                                selectedClass="";
                            }
                        }
                    }
                }

            });

            JLabel survivedLabel2 = new JLabel("Passenger ID: ");
            survivedLabel2.setBounds(survivedComboBox.getX() + survivedComboBox.getWidth() + Constants.gap * 8, y, Constants.LABEL_WIDTH, Constants.LABEL_HEIGHT);
            this.add(survivedLabel2);
            this.survivedComboBox2 = new JComboBox<>();
            this.survivedComboBox2.setBounds(survivedLabel2.getX() + survivedLabel2.getWidth(), y, Constants.LABEL_WIDTH, Constants.LABEL_HEIGHT);
            this.survivedComboBox2.setEditable(true);
            this.survivedComboBox2.setPrototypeDisplayValue(3);
            this.add(survivedComboBox2);

            JTextComponent editor1 = (JTextComponent) this.survivedComboBox2.getEditor().getEditorComponent();
            DocumentFilter filter1 = new DocumentFilter() {
                public void insertString(FilterBypass filterBypass, int offset, String string, AttributeSet attributeSet) throws BadLocationException {
                    if ((filterBypass.getDocument().getLength() + string.length()) <= 3) {
                        super.insertString(filterBypass, offset, string, attributeSet);
                    }
                }

                public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                    if ((fb.getDocument().getLength() - length + text.length()) <= 3) {
                        super.replace(fb, offset, length, text, attrs);
                    }
                }
            };
            ((AbstractDocument) editor1.getDocument()).setDocumentFilter(filter1);

            this.survivedComboBox2.addActionListener(e -> {
                selectedNumber=(String) this.survivedComboBox2.getSelectedItem();
            });
            JLabel survivedLabel3 = new JLabel("Passenger Name: ");
            survivedLabel3.setBounds(x + Constants.MARGIN_FROM_LEFT, survivedComboBox.getY() + survivedComboBox.getHeight() + Constants.gap * 3, Constants.LABEL_WIDTH, Constants.LABEL_HEIGHT);
            this.add(survivedLabel3);
            this.survivedComboBox3 = new JComboBox<>();
            this.survivedComboBox3.setBounds(survivedLabel3.getX() + survivedLabel3.getWidth(), survivedLabel3.getY(), Constants.COMBO_BOX_WIDTH, Constants.COMBO_BOX_HEIGHT);
            this.survivedComboBox3.setEditable(true);
            this.add(survivedComboBox3);

            this.survivedComboBox3.addActionListener(e -> {
                selectedName=(String) this.survivedComboBox3.getEditor().getItem();
                //System.out.println("name "+passengerName);
            });

            JLabel survivedLabel4 = new JLabel("Passenger Sex: ");
            survivedLabel4.setBounds(survivedLabel2.getX(), survivedComboBox.getY() + survivedComboBox.getHeight() + Constants.gap * 3, Constants.LABEL_WIDTH, Constants.LABEL_HEIGHT);
            this.add(survivedLabel4);
            this.survivedComboBox4 = new JComboBox<>(Constants.PASSENGERS_SEX_OPTIONS);
            this.survivedComboBox4.setBounds(survivedLabel4.getX() + survivedLabel4.getWidth(), survivedLabel4.getY(), Constants.COMBO_BOX_WIDTH, Constants.COMBO_BOX_HEIGHT);
            this.add(this.survivedComboBox4);

            this.survivedComboBox4.addActionListener(e -> {
                selectedGender = (String) survivedComboBox4.getSelectedItem();
                //System.out.println(selectedGender);
            });


            JLabel survivedLabel5 = new JLabel("Passenger Sib/Sum: ");
            survivedLabel5.setBounds(survivedLabel3.getX(), this.survivedComboBox3.getY() + this.survivedComboBox3.getHeight() + Constants.gap * 3, Constants.LABEL_WIDTH, Constants.LABEL_HEIGHT);
            this.add(survivedLabel5);
            this.survivedComboBox5 = new JComboBox<>();
            this.survivedComboBox5.setBounds(survivedLabel5.getX() + survivedLabel5.getWidth(), survivedLabel5.getY(), Constants.COMBO_BOX_WIDTH, Constants.COMBO_BOX_HEIGHT);
            this.survivedComboBox5.setEditable(true);
            this.add(survivedComboBox5);

            JTextComponent editor3 = (JTextComponent) this.survivedComboBox5.getEditor().getEditorComponent();
            DocumentFilter filter3 = new DocumentFilter() {
                public void insertString(FilterBypass filterBypass, int offset, String string, AttributeSet attributeSet) throws BadLocationException {
                    if ((filterBypass.getDocument().getLength() + string.length()) <= 3) {
                        super.insertString(filterBypass, offset, string, attributeSet);
                    }
                }

                public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                    if ((fb.getDocument().getLength() - length + text.length()) <= 1) {
                        super.replace(fb, offset, length, text, attrs);
                    }
                }
            };
            ((AbstractDocument) editor3.getDocument()).setDocumentFilter(filter3);

            this.survivedComboBox5.addActionListener(e -> {
                selectedSib = (String) this.survivedComboBox5.getSelectedItem();
                //System.out.println(selectedSib);
            });

            JLabel survivedLabel6 = new JLabel("Passenger Parch: ");
            survivedLabel6.setBounds(survivedLabel4.getX(), survivedLabel5.getY(), Constants.LABEL_WIDTH, Constants.LABEL_HEIGHT);
            this.add(survivedLabel6);
            this.survivedComboBox6 = new JComboBox<>();
            this.survivedComboBox6.setBounds(survivedLabel6.getX() + survivedLabel6.getWidth(), survivedLabel6.getY(), Constants.COMBO_BOX_WIDTH, Constants.COMBO_BOX_HEIGHT);
            this.survivedComboBox6.setEditable(true);
            this.add(survivedComboBox6);

            JTextComponent editor4 = (JTextComponent) this.survivedComboBox6.getEditor().getEditorComponent();
            DocumentFilter filter4 = new DocumentFilter() {
                public void insertString(FilterBypass filterBypass, int offset, String string, AttributeSet attributeSet) throws BadLocationException {
                    if ((filterBypass.getDocument().getLength() + string.length()) <= 3) {
                        super.insertString(filterBypass, offset, string, attributeSet);
                    }
                }

                public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                    if ((fb.getDocument().getLength() - length + text.length()) <= 1) {
                        super.replace(fb, offset, length, text, attrs);
                    }
                }
            };
            ((AbstractDocument) editor4.getDocument()).setDocumentFilter(filter4);

            this.survivedComboBox6.addActionListener(e -> {
                selectedParch = (String) this.survivedComboBox6.getSelectedItem();
                //System.out.println(selectedParch);
            });


            JLabel survivedLabel7 = new JLabel("Passenger Ticket: ");
            survivedLabel7.setBounds(survivedLabel5.getX(), this.survivedComboBox5.getY() + this.survivedComboBox5.getHeight() + Constants.gap * 3, Constants.LABEL_WIDTH, Constants.LABEL_HEIGHT);
            this.add(survivedLabel7);
            this.survivedComboBox7 = new JComboBox<String>();
            this.survivedComboBox7.setBounds(survivedLabel7.getX() + survivedLabel7.getWidth(), survivedLabel7.getY(), Constants.COMBO_BOX_WIDTH, Constants.COMBO_BOX_HEIGHT);
            this.survivedComboBox7.setEditable(true);
            this.add(survivedComboBox7);

            JTextComponent editor5 = (JTextComponent) this.survivedComboBox7.getEditor().getEditorComponent();
            DocumentFilter filter5 = new DocumentFilter() {
                public void insertString(FilterBypass filterBypass, int offset, String string, AttributeSet attributeSet) throws BadLocationException {
                    if ((filterBypass.getDocument().getLength() + string.length()) <= 3) {
                        super.insertString(filterBypass, offset, string, attributeSet);
                    }
                }

                public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                    if ((fb.getDocument().getLength() - length + text.length()) <= 1) {
                        super.replace(fb, offset, length, text, attrs);
                    }
                }
            };
            ((AbstractDocument) editor5.getDocument()).setDocumentFilter(filter5);
            this.survivedComboBox7.addActionListener(e -> {
                selectedTicket = (String) this.survivedComboBox7.getSelectedItem();
                //System.out.println(selectedTicket);
            });

            JLabel survivedLabel8 = new JLabel("Passenger Fare");
            survivedLabel8.setBounds(survivedLabel6.getX(), survivedLabel7.getY(), Constants.LABEL_WIDTH, Constants.LABEL_HEIGHT);
            this.add(survivedLabel8);
            this.survivedComboBox8 = new JComboBox<>();
            this.survivedComboBox8.setBounds(survivedLabel8.getX() + survivedLabel8.getWidth(), survivedLabel8.getY(), Constants.COMBO_BOX_WIDTH, Constants.COMBO_BOX_HEIGHT);
            this.survivedComboBox8.setEditable(true);
            this.add(survivedComboBox8);

            JTextComponent editor6 = (JTextComponent) this.survivedComboBox8.getEditor().getEditorComponent();
            DocumentFilter filter6 = new DocumentFilter() {
                public void insertString(FilterBypass filterBypass, int offset, String string, AttributeSet attributeSet) throws BadLocationException {
                    if ((filterBypass.getDocument().getLength() + string.length()) <= 3) {
                        super.insertString(filterBypass, offset, string, attributeSet);
                    }
                }
                public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                    if ((fb.getDocument().getLength() - length + text.length()) <= 1) {
                        super.replace(fb, offset, length, text, attrs);
                    }
                }
            };
            ((AbstractDocument) editor6.getDocument()).setDocumentFilter(filter6);
            this.survivedComboBox8.addActionListener(e -> {
                selectedFare = (String) this.survivedComboBox8.getSelectedItem();
                //System.out.println(selectedFare);
            });

            JLabel survivedLabel9 = new JLabel("Passenger Cabin");
            survivedLabel9.setBounds(survivedLabel7.getX(), this.survivedComboBox7.getY() + this.survivedComboBox7.getHeight() + Constants.gap * 3, Constants.LABEL_WIDTH, Constants.LABEL_HEIGHT);
            this.add(survivedLabel9);
            this.survivedComboBox9 = new JComboBox<>();
            this.survivedComboBox9.setBounds(survivedLabel9.getX() + survivedLabel9.getWidth(), survivedLabel9.getY(), Constants.LABEL_WIDTH, Constants.LABEL_HEIGHT);
            this.survivedComboBox9.setEditable(true);
            this.add(survivedComboBox9);

            JTextComponent editor7 = (JTextComponent) this.survivedComboBox9.getEditor().getEditorComponent();
            DocumentFilter filter7 = new DocumentFilter() {
                public void insertString(FilterBypass filterBypass, int offset, String string, AttributeSet attributeSet) throws BadLocationException {
                    if ((filterBypass.getDocument().getLength() + string.length()) <= 3) {
                        super.insertString(filterBypass, offset, string, attributeSet);
                    }
                }
                public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                    if ((fb.getDocument().getLength() - length + text.length()) <= 1) {
                        super.replace(fb, offset, length, text, attrs);
                    }
                }
            };
            ((AbstractDocument) editor7.getDocument()).setDocumentFilter(filter7);
            this.survivedComboBox9.addActionListener(e -> {
                selectedCabin = (String) this.survivedComboBox9.getSelectedItem();
                //System.out.println(selectedCabin);
            });

            JLabel survivedLabel10 = new JLabel("Passenger Embarked: ");
            survivedLabel10.setBounds(survivedLabel8.getX(), survivedLabel9.getY(), Constants.LABEL_WIDTH, Constants.LABEL_HEIGHT);
            this.add(survivedLabel10);
            this.survivedComboBox10 = new JComboBox<>(Constants.PASSENGER_PORT_OPTIONS);
            this.survivedComboBox10.setBounds(survivedLabel10.getX() + survivedLabel10.getWidth(), survivedLabel10.getY(), Constants.COMBO_BOX_WIDTH, Constants.COMBO_BOX_HEIGHT);
            this.add(survivedComboBox10);
            this.survivedComboBox10.addActionListener(e -> {
                selectedEmbarked = (String) survivedComboBox10.getSelectedItem();
                //System.out.println(selectedEmbarked);
            });

            filterLabel.setBounds((Constants.WINDOW_WIDTH/2)-100, survivedLabel10.getY()+survivedLabel10.getHeight()+20,400,30);
            this.add(filterLabel);
            filterButton.setBounds(survivedLabel9.getX()+Constants.gap*3,survivedLabel9.getY()+survivedLabel9.getHeight()+Constants.gap*5,Constants.BUTTON_WIDTH,Constants.BUTTON_HEIGHT);
            this.add(filterButton);
            filterButton.addActionListener(e -> {
                int count=0;

                for(Passenger passenger:Test.getPassengers()){
                    boolean matchClass=selectedClass.equals("")|| selectedClass.equals(passenger.getPclass());
                    boolean matchName=selectedName.equals("")||selectedName.equals(passenger.getName());
                    boolean matchGender=selectedGender.equals("")||selectedGender.equals(passenger.getSex());
                    boolean matchSib=selectedSib.equals("")||passenger.getSibSP().startsWith(selectedSib);
                    boolean matchParch=selectedParch.equals("")||passenger.getParch().startsWith(selectedParch);
                    boolean matchTicket=selectedTicket.equals("")||passenger.getTicket().startsWith(selectedTicket);
                    boolean matchFare=selectedFare.equals("")||selectedFare.equals(passenger.getFare());
                    boolean matchCabin=selectedCabin.equals("")||passenger.getCabin().startsWith(selectedCabin);
                    boolean matchEmbarked=selectedEmbarked.equals("")||passenger.getEmbarked().startsWith(selectedEmbarked);

                    if(matchClass && matchName&&matchGender&&matchSib&&matchParch&&matchTicket&&matchFare&&matchCabin&&matchEmbarked){
                        totalRows++;
                        if(passenger.getSurvived().equals("0")){
                            deceased++;
                        }
                        if(passenger.getSurvived().equals("1")){
                            survived++;
                        }

                    }
                    count++;
                    if(!selectedNumber.equals("") && count==Integer.parseInt(selectedNumber)){
                        break;
                    }
                }
                System.out.println("Total Rows: "+totalRows+"("+survived+" survived, "+deceased+" did not)");// צריך להופיע בחלון
                String string=new String("Total Rows: "+totalRows+"("+survived+" survived, "+deceased+" did not)");
                filterLabel.setText(string);
                try {
                    crateFilterFile(string);
                } catch (IOException ex) {
                    throw new RuntimeException(ex);
                }
                totalRows=0; survived=0; deceased=0;
            });


            statisticsButton.setBounds(Constants.WINDOW_WIDTH- filterButton.getX()- filterButton.getWidth(), filterButton.getY(),Constants.BUTTON_WIDTH,Constants.BUTTON_HEIGHT);
            this.add(statisticsButton);
            statisticsButton.addActionListener(e -> {
                boolean areRelatives=false;
                int survivedFromClass=0; int overAllFromClass=0;
                //int survivedFromGender=0; int overAllFromGender=0;
                int survivedFromGenderA=0; int overAllFromGenderA=0;
                int survivedFromGenderB=0; int overAllFromGenderB=0;
                int relativesAre=0; int relativesNone=0;
                int survivedFromPortC=0; int overAllFromPortC=0;
                int survivedFromPortQ=0; int overAllFromPortQ=0;
                int survivedFromPortS=0; int overAllFromPortS=0;
                int survivedByPounds1=0 ; int overAllByPounds1=0;
                int survivedByPounds2=0 ; int overAllByPounds2=0;
                int survivedByPounds3=0 ; int overAllByPounds3=0;

                int survivedFromAgeGroup1=0; int overAllFromAgeGroup1=0;
                int survivedFromAgeGroup2=0; int overAllFromAgeGroup2=0;
                int survivedFromAgeGroup3=0; int overAllFromAgeGroup3=0;
                int survivedFromAgeGroup4=0; int overAllFromAgeGroup4=0;
                int survivedFromAgeGroup5=0; int overAllFromAgeGroup5=0;
                int survivedFromAgeGroup6=0; int overAllFromAgeGroup6=0;

                for(Passenger passenger:Test.getPassengers()) {
                    if (selectedClass.equals("") || selectedClass.equals(passenger.getPclass())) {
                        if (passenger.getSurvived().equals("1")) {
                            survivedFromClass++;
                        }
                        overAllFromClass++;

                        /*if (selectedGender.equals("") || selectedGender.equals(passenger.getSex())) {
                            if (passenger.getSurvived().equals("1")) {
                                survivedFromGender++;
                            }
                            overAllFromGender++;
                        }*/


                        if(passenger.getSex().equals("male")&& passenger.getSurvived().equals("1")){
                            survivedFromGenderA++;
                        }
                        if(passenger.getSex().equals("male")){
                            overAllFromGenderA++;
                        }
                        if(passenger.getSex().equals("female") && passenger.getSurvived().equals("1")){
                            survivedFromGenderB++;
                        }
                        if(passenger.getSex().equals("female")){
                            overAllFromGenderB++;
                        }

                        if (getAgeGroup(passenger.getAge()).equals("0-10")&& passenger.getSurvived().equals("1")) {
                            survivedFromAgeGroup1++;
                        }
                        if(getAgeGroup(passenger.getAge()).equals("0-10")){
                            overAllFromAgeGroup1++;
                        }
                        if (getAgeGroup(passenger.getAge()).equals("11-20")&& passenger.getSurvived().equals("1")) {
                            survivedFromAgeGroup2++;
                        }
                        if(getAgeGroup(passenger.getAge()).equals("11-20")){
                            overAllFromAgeGroup2++;
                        }
                        if (getAgeGroup(passenger.getAge()).equals("21-30")&& passenger.getSurvived().equals("1")) {
                            survivedFromAgeGroup3++;
                        }
                        if(getAgeGroup(passenger.getAge()).equals("21-30")){
                            overAllFromAgeGroup3++;
                        }
                        if (getAgeGroup(passenger.getAge()).equals("31-40")&& passenger.getSurvived().equals("1")) {
                            survivedFromAgeGroup4++;
                        }
                        if(getAgeGroup(passenger.getAge()).equals("31-40")){
                            overAllFromAgeGroup4++;
                        }
                        if (getAgeGroup(passenger.getAge()).equals("41-50")&& passenger.getSurvived().equals("1")) {
                            survivedFromAgeGroup5++;
                        }
                        if(getAgeGroup(passenger.getAge()).equals("41-50")){
                            overAllFromAgeGroup5++;
                        }
                        if (getAgeGroup(passenger.getAge()).equals("51+")&& passenger.getSurvived().equals("1")) {
                            survivedFromAgeGroup6++;
                        }
                        if(getAgeGroup(passenger.getAge()).equals("51+")){
                            overAllFromAgeGroup6++;
                        }

                        if(passenger.getEmbarked().equals("C") && passenger.getSurvived().equals("1")){
                            survivedFromPortC++;
                        }
                        if(passenger.getEmbarked().equals("C")){
                            overAllFromPortC++;
                        }

                        if(passenger.getEmbarked().equals("Q")&& passenger.getSurvived().equals("1")){
                            survivedFromPortQ++;
                        }
                        if(passenger.getEmbarked().equals("Q")){
                            overAllFromPortQ++;
                        }

                        if(passenger.getEmbarked().equals("S")&& passenger.getSurvived().equals("1")){
                            survivedFromPortS++;
                        }
                        if(passenger.getEmbarked().equals("S")){
                            overAllFromPortS++;
                        }

                        if(getByPounds(passenger.getFare()).equals("0-9")&& passenger.getSurvived().equals("1")){
                            survivedByPounds1++;
                        }
                        if(getByPounds(passenger.getFare()).equals("0-9")){
                            overAllByPounds1++;
                        }
                        if(getByPounds(passenger.getFare()).equals("11-30")&& passenger.getSurvived().equals("1")){
                            survivedByPounds2++;
                        }
                        if(getByPounds(passenger.getFare()).equals("11-30")){
                            overAllByPounds2++;
                        }
                        if(getByPounds(passenger.getFare()).equals("30+")&& passenger.getSurvived().equals("1")){
                            survivedByPounds3++;
                        }
                        if(getByPounds(passenger.getFare()).equals("30+")){
                            overAllByPounds3++;
                        }

                        int sum = Integer.parseInt(passenger.getSibSP()) + Integer.parseInt(passenger.getParch());
                        String sumOfRelatives = Integer.toString(sum);
                        getAgeGroup(passenger.getAge());
                        if (sum >= 1) {
                            areRelatives = true;
                        }





                        double survivorsFromClass = (survivedFromClass / overAllFromClass) * 100;
                        //double survivorsFromGender = (survivedFromGender / overAllFromGender) * 100;
                        double survivorsFromGenderA=(survivedFromGenderA/overAllFromGenderA)*100;
                        double survivorsFromGenderB=(survivedFromGenderB/overAllFromGenderB)*100;
                        double survivorsFromAgeGroup1 = (survivedFromAgeGroup1 / overAllFromAgeGroup1) * 100;
                        double survivorsFromAgeGroup2 = (survivedFromAgeGroup2 / overAllFromAgeGroup2) * 100;
                        double survivorsFromAgeGroup3 = (survivedFromAgeGroup3 / overAllFromAgeGroup3) * 100;
                        double survivorsFromAgeGroup4 = (survivedFromAgeGroup4 / overAllFromAgeGroup4) * 100;
                        double survivorsFromAgeGroup5 = (survivedFromAgeGroup5 / overAllFromAgeGroup5) * 100;
                        double survivorsFromAgeGroup6 = (survivedFromAgeGroup6 / overAllFromAgeGroup6) * 100;
                        double survivorsFromPortC=(survivedFromPortC/overAllFromPortC)*100;
                        double survivorsFromPortQ=(survivedFromPortQ/overAllFromPortQ)*100;
                        double survivorsFromPortS=(survivedFromPortS/overAllFromPortS)*100;
                        double survivorsByPounds1=(survivedByPounds1/overAllByPounds1)*100;
                        double survivorsByPounds2=(survivedByPounds2/overAllByPounds2)*100;
                        double survivorsByPounds3=(survivedByPounds3/overAllByPounds3)*100;

                        System.out.println("survivors from class "+selectedClass+": "+survivorsFromClass+"%");
                        //System.out.println("survivors from gender "+selectedGender+": "+survivorsFromGender+"%");
                        System.out.println("male survivors: "+survivedFromGenderA+"%");
                        System.out.println("female survivors: "+survivedFromGenderB+"%");
                        System.out.println("survivors from age 0-10: "+survivorsFromAgeGroup1+"%");
                        System.out.println("survivors from age 11-20: "+survivorsFromAgeGroup2+"%");
                        System.out.println("survivors from age 21-30: "+survivorsFromAgeGroup3+"%");
                        System.out.println("survivors from age 31-40: "+survivorsFromAgeGroup4+"%");
                        System.out.println("survivors from age 41-50: "+survivorsFromAgeGroup5+"%");
                        System.out.println("survivors from age 50+: "+survivorsFromAgeGroup6+"%");

                        System.out.println("survivors from port C: "+survivorsFromPortC+"%");
                        System.out.println("survivors from port Q: "+survivorsFromPortQ+"%");
                        System.out.println("survivors from port S: "+survivorsFromPortS+"%");

                        System.out.println("survivors by pounds 0-9: "+survivorsByPounds1+"%");
                        System.out.println("survivors by pounds 11-30: "+survivorsByPounds2+"%");
                        System.out.println("survivors by pounds 30+: "+survivorsByPounds3+"%");


                    }
                }
            });


        }
    }
    private static void crateFilterFile(String string) throws IOException {
        try {
            if (file.createNewFile()) {
                fileWriter.write(string);
                fileWriter.close();
            }
        } catch (IOException e) {
            System.out.println("An error occurred while creating the file.");
            e.printStackTrace();
        }
    }
    private static void createStatisticsFile(){

    }
    private static String getAgeGroup(String string){
        int age=Integer.parseInt(string);
        String ageGroup="";
        if(age<=10){
            ageGroup="0-10";
        }
        if(age<=20 && age>=11){
            ageGroup="11-20";
        }
        if(age<=30 && age>=21){
            ageGroup="21-30";
        }
        if(age<=40 && age>=31){
            ageGroup="31-40";
        }
        if(age<=50 && age>=41){
            ageGroup="41-50";
        }
        if(age<=51){
            ageGroup="51+";
        }
        return ageGroup;
    }
    private static String getByPounds(String string){
        String poundsGroup="";
        double pounds=Double.parseDouble(string);
        if(pounds<10){
            poundsGroup="0-9";
        }
        if(pounds<=30 && pounds>=11){
            poundsGroup="11-30";
        }
        if(pounds>30){
            poundsGroup="30+";
        }
        return poundsGroup;
    }



}















public class Constants {

    public static final String PATH_TO_DATA_FILE = "src/data/titanic.csv";
    public static final int WINDOW_WIDTH = 600;
    public static final int WINDOW_HEIGHT = 700;
    public static final String[] PASSENGER_CLASS_OPTIONS = { "All", "1st", "2nd", "3rd"};
    public static final String[] PASSENGERS_SEX_OPTIONS={"ALL","male","female"};
    public static final String[] PASSENGER_PORT_OPTIONS={"ALL","S","Q","C"};
    public static final int MARGIN_FROM_TOP = 10;
    public static final int MARGIN_FROM_LEFT = 5;
    public static final int LABEL_WIDTH = 100;
    public static final int LABEL_HEIGHT = 30;
    public static final int COMBO_BOX_WIDTH = 80;
    public static final int COMBO_BOX_HEIGHT = 30;
    public static final int BUTTON_WIDTH =200;
    public static final int BUTTON_HEIGHT =60;


    public static final int gap=20;

/*    public static final ArrayList<String> PASSENGERS_ID_OPTIONS=IDList(test.passengers);

    private static ArrayList<String> IDList(ArrayList<Passenger> passengers){
        ArrayList<String> passengersID=new ArrayList<String>();

        for(Passenger passenger:passengers){
            passengersID.add(passenger.getPassengerID());
        }

        return passengersID;
    }*/

}
